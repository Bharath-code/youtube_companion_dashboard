// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  displayName   String?   // Custom display name that user can set
  username      String?   // Optional username for @mentions, etc.
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  notes    Note[]
  eventLogs EventLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Note {
  id        String   @id @default(cuid())
  videoId   String
  content   String
  tags      String   // JSON string for SQLite compatibility
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([videoId])
  @@index([userId])
  @@index([content]) // Add content indexing for better search performance
  @@index([tags])    // Add tags indexing for better tag filtering
  @@index([userId, videoId]) // Composite index for user-video queries
  @@index([userId, createdAt]) // Composite index for user-date queries
  @@map("notes")
}

model EventLog {
  id         String   @id @default(cuid())
  eventType  String
  entityType String
  entityId   String
  metadata   String?  // JSON string for SQLite compatibility
  timestamp  DateTime @default(now())
  ipAddress  String?
  userAgent  String?
  
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([eventType])
  @@index([timestamp])
  @@map("event_logs")
}
